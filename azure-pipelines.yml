pr:
  branches:
    include:
      - master
trigger:
  branches:
    include:
      - master

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '8.x'
  vmImage: 'ubuntu-latest'
  projectRoot: 'FiapCloudGame' 
  solution: 'FiapCloudGame.sln'
  projectApi: 'FiapCloudGame.API/FiapCloudGame.API.csproj'
  projectTest: 'FiapCloudGame.Teste/FiapCloudGame.Teste.csproj'

stages:
- stage: 'Build'
  displayName: 'Build e Teste'
  jobs:
  - job: 'Build'
    displayName: 'Build Job'
    pool:
      vmImage: '$(vmImage)'

    steps:
    
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(dotnetSdkVersion)'
    
    - task: DotNetCoreCLI@2
      displayName: 'Restore solution'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        feedsToUse: 'select'
        workingDirectory: '$(projectRoot)'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        workingDirectory: '$(projectRoot)'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '$(projectTest)'
        arguments: '--no-build --configuration $(buildConfiguration)'
        workingDirectory: '$(projectRoot)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish API'
      inputs:
        command: 'publish'
        projects: '$(projectApi)' 
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/App'
        zipAfterPublish: true
        workingDirectory: '$(projectRoot)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'